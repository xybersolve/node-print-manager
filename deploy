#!/usr/bin/env bash
# ================================================================
# -*- mode: bash -*-
# vi: set ft=sh
# ****************************************************************
#
# DESCRIPTION
#    Deploy node REST server
#
# SYNTAX & EXAMPLES
#    See 'SYNTAX' (below)
#
# ----------------------------------------------------------------
# IMPLEMENTATION
#    version         script 0.1.1
#    author          Greg Milligan
#    copyright       Copyright (c) 2018 http://xybersolve.io
#    license         GNU General Public License
#
# ================================================================
#  DEBUG OPTION
#    set -n  # Uncomment to check your syntax, without execution.
#    set -x  # Uncomment to debug this shell script
#
# ---------------------------------------------------------------
#
# TODO:
# ****************************************************************


# ---------------------------------------
# CONFIGFURATION
# ---------------------------------------
# strict environment
set -o errexit  # exit on command error status
set -o nounset  # no unreadonlyd variables
set -o pipefail # failr on pipe failures
trap 'echo "Aborting due to errexit on line $LINENO. Exit code: ${?}" >&2' ERR

# ---------------------------------------
# GLOBAL VARIABLES
# ---------------------------------------
# booleans
declare -ir TRUE=1
declare -ir FALSE=0
# script info

declare -r PROGNAME="$(basename ${0})"
declare -r VERSION=0.0.1
declare -r SUBJECT=""
declare -r KEYS=""
declare -ri MIN_ARG_COUNT=1
declare -r SYNTAX=$(cat <<EOF

    Script: ${PROGNAME}
    Purpose:
    Usage: ${PROGNAME} [options]

    Options:
      --help:  help and usage
      --version: show version info

      --clean-local: Clean local project directory
      --clean_remote: Clean up remote project directory
      --local: Local install on server
      --copy: Use scp for simple copy to server
      --sync: Use rsync for project copy to the server
      --clone: Clone project from repository
      --all: Run: clone, install and run

      --mongo-backup[=collection]: Backup mongo collection or database (bson)
      --mongo-restore[=collection]: Restore database or collection from mongo backup

      Examples:
        ${PROGNAME} --mongo-backup
        ${PROGNAME} --mongo-backup=locations
        ${PROGNAME} --mongo-restore
        ${PROGNAME} --mongo-restore=owners

EOF
)
# files & directories
declare -r SCRIPT_DIR="$( dirname ${0} )"
declare -r CONFIG_FILE="${SCRIPT_DIR}/deploy.config.sh"

# actions
declare -i LOCAL=${FALSE}
declare -i COPY=${FALSE}
declare -i CLEAN_LOCAL=${FALSE}
declare -i CLEAN_REMOTE=${FALSE}
declare -i SYNC=${FALSE}
declare -i MONGO_BACKUP=${FALSE}
declare -i MONGO_RESTORE=${FALSE}
declare -i MONGO_STATS=${FALSE}

# script globals
COLLECTION=''
# declare -r GIT_REP="git@github.com:xybersolve/node-print-manager.git"
# declare -r APP_DIRECTORY='/home/ubuntu/node/print-manager'
# declare -r SERVER_IP='52.13.196.106'
# declare -r USER='ubuntu'
# declare HOST='control'
# ---------------------------------------
# COMMON FUNCTIONS
# ---------------------------------------
usage() {
  echo "${SYNTAX}"
}

error() {
  printf "\n%s\n" "Error: ${1}"
}

die() {
  error "${1}"
  usage
  printf "\n\n"
  exit "${2:-1}"
}

show_version() {
  printf "\n\n%s  %s\n\n\n" "${PROGNAME}" "${VERSION}"
  exit 0
}

show_help() {
  printf "\n\n"
  usage
  printf "\n\n"
  exit 0
}

# ---------------------------------------
# MAIN ROUTINES
# ---------------------------------------
source "${CONFIG_FILE}" \
  die "Unable to load config file: ${CONFIG_FILE}" 1

__build_host() {
  # create host string: using HOST or user@server
  [[ -n ${HOST} ]] && echo "${HOST}" || echo "${USER}@${IP}"
}

__ssh_config() {
:
# Host control
#   Hostname 52.13.196.106
#   Port 22
#   User ubuntu
#   IdentityFile ~/.ssh/transible-key
}

__clean_remote() {
  local -r host="$( __build_host )"
  ssh -o StrictHostKeyChecking=no "${host}" "rm -rf ${APP_DIRECTORY}"
}

__clean_local() {
  rm -rf ${APP_DIRECTORY}
}

__clone() {
  echo "Clone"
  cd ${APP_DIRECTORY}
  git clone "${GIT_REPO}"
}

__install() {
  echo "Install PM2 & dependencies"
  cd ${APP_DIRECTORY}
  which pm2 &>/dev/null || npm i -g pm2
  npm i
}

__run() {
  echo "Start server"
  cd ${APP_DIRECTORY}
  npm run start:prod:pm2
  # npm run start:pm2
}

__stop() {
  npm run stop:pm2
}

__all() {
  echo "Start deploy"
  cd ${APP_DIRECTORY}
  __clone
  __install
  __run
}

__sync() {
  echo "rsync to server"
  local -r dir='/home/ubuntu/node/print-manager'

  # create project directory
  ssh -o StrictHostKeyChecking=no control 'mkdir -p /home/ubuntu/node/print-manager'
  # copy without git tree
  # rsync -avr --exclude 'node_modules' --exclude '.git' . control:${dir}
  # copy with git tree
  rsync -avr --exclude 'node_modules' . control:${dir}
}
# sudo find ${SITE_PATH} -type d -print0 | xargs -0 -I{} chmod 755 {}
# sudo find ./${WP_DOWNLOAD_DIR} !-name *.zip -maxdepth 1 -type f -print0 \
#    | xargs -0 -I{} cp {} "${SITE_PATH}"

__copy() {
  local host="$( __build_host )"

  ssh -o StrictHostKeyChecking=no "${host}" "[[ -d ${APP_DIRECTORY} ]] || mkdir -p ${APP_DIRECTORY}"

  # all first level directories
  find . -type f -maxdepth 1 -print0 \
    | xargs -0 -I{} scp -o StrictHostKeyChecking=no {} ${host}:${APP_DIRECTORY}

  # directories in project source
  find ./src -type d  -print0 \
    | xargs -0 -I{} scp -r -o StrictHostKeyChecking=no {} ${host}:${APP_DIRECTORY}
}

__remote() {
  local host="$( __build_host )"

  # upload all the code to machine
  # find . -type d -name 'src/*' \
  #   | xargs tar cf - \
  #   | ssh "${host}" tar xf - -C "${APP_DIRECTORY}"

  # Run script inside of machine
  ssh -o StrictHostKeyChecking=no "${host}" "./deploy --all"
}

__mongo_backup() {
  # hypotehtical usage examples
  # backup a collection
  # mongodump --db test --collection collection
  # backup remote host
  # mongodump --host mongodb1.example.net --port 37017 --username user --password "pass" --out /opt/backup/mongodump-2011-10-24
  if [[ -n "${COLLECTION}" ]]; then
    mongodump --db "${DATABASE}" --collection "${COLLECTION}" --out "${MONGO_BACKUP_DIR}"
  else
    mongodump --db "${DATABASE}" --out "${MONGO_BACKUP_DIR}"
  fi
}

__mongo_restore() {
  [[ -d ${MONGO_BACKUP_DIR} ]] || die "No data directory was found: ${MONGO_BACKUP_DIR}" 2

  if [[ -n ${COLLECTION} ]]; then
    # --mongo-restore=locations
    # if collection was passed as argument value, use restore this collection
    # drop and restore collection - for data manipulation and freshening data
    local file="${MONGO_BACKUP_DIR}/${COLLECTION}.bson"
    #mongo --shell use printManager
    #mongo --shell db.dropCollection("${COLLECTION}")
    #mongo --shell db.createCollection("${COLLECTION}")
    mongorestore -d ${DATABASE} -c ${collection} ${file}
  else
    local -a files=($( ls ${MONGO_BACKUP_DIR}/*.bson | tr ' ' '\r\n'  ))
    for file in "${files[@]}"; do
      local base=$( basename "${file}" )
      local collection="${base%.*}"
      printf "Restoring: %s -> %s -> %s\n" "${DATABASE}" "${collection}" "${file}"
      mongorestore -d ${DATABASE} -c ${collection} ${file}
    done
  fi
#
}

__mongo_stats() {
  # mongo --eval "db = connect('doamin.com:27017/database')"
  mongo "${DATABASE}" --eval "printjson(db.getCollectionNames())"
  mongo "${DATABASE}" --eval "printjson(db.stats())"
}

__get_opts() {
  while (( $# > 0 )); do
    local arg="${1}"; shift;
    case ${arg} in
      --help)    show_help                ;;
      --version) show_version             ;;
      --clean-local)   CLEAN_LOCAL=${TRUE}  ;;
      --clean-remote)  CLEAN_REMOTE=${TRUE} ;;
      --local)            LOCAL=${TRUE}   ;;
      --copy)             COPY=${TRUE}    ;;
      --sync)             SYNC=${TRUE}    ;;
      # mongo
      --mongo-backup*)      MONGO_BACKUP=${TRUE}
        [[ ${arg} =~ '=' ]] && COLLECTION="${arg#*=}"
        ;;
      --mongo-restore*)    MONGO_RESTORE=${TRUE}
        [[ ${arg} =~ '=' ]] && COLLECTION="${arg#*=}"
        ;;
      --mongo-stats) MONGO_STATS=${TRUE} ;;

      --data*) # --option=argument
        [[ ${arg} =~ '=' ]] && DATA="${arg#*=}"
        ;;
      *) die "Unknown option: ${arg}" ;;
   esac
  done
  return 0
}

__dispatch() {
  # __clean should preceed other routines in dispatch
  (( CLEAN_LOCAL )) && __clean_local
  (( CLEAN_REMOTE )) && __clean_remote
  (( LOCAL )) && __local
  (( COPY )) && __copy
  (( SYNC )) && __sync
  # mongo routines
  (( MONGO_BACKUP )) && __mongo_backup
  (( MONGO_RESTORE )) && __mongo_restore
  (( MONGO_STATS )) && __mongo_stats
  return 0
}

main() {
  (( ${#} < MIN_ARG_COUNT )) && die "Expects at least ${MIN_ARG_COUNT} arguments" 1
  (( $# > 0 )) && __get_opts "$@"

  __dispatch

  return 0
}
(( ${#} > 0 )) && main "${@}" || main
